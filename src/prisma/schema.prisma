generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id
  username        String    @unique
  email           String    @unique
  password_hash   String
  mfa_secret_hash String?
  role            String    @default("user")
  sessions        Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Enrolment {
  id                         Int     @id @default(autoincrement())
  student_school             String
  agree_tsa_terms            Boolean
  student_first_name         String
  student_surname            String
  student_grade              String
  previous_student           Boolean
  opportunity_student        Boolean
  instrument                 String
  inst_other                 String?
  student_medical            String
  selected_program_id        String
  client_first_name          String
  client_surname             String
  relationship               String?
  secondary_first_name       String?
  secondary_surname          String?
  secondary_email            String?
  secondary_contact_number   String?
  client_email               String
  client_mobile              String
  client_home_phone          String?
  client_work_phone          String?
  client_street_address      String
  client_city_suburb         String
  client_state               String
  client_postcode            String
  hire_purchase_byo          String
  inst_is_insured            Boolean
  drivers_license_no         String?
  nearest_relative_name      String?
  nearest_relative_phone     String?
  main_earner_name           String?
  main_earner_mobile         String?
  main_earner_employer_name  String?
  main_earner_employer_phone String?
  cc_or_direct_debit         String?
  agree_rental_terms         Json?
  cc_name                    String?
  cc_number                  String?
  cc_expiry                  String?
  cc_ccv                     String?
  bank_country               String?
  bank_name                  String?
  bank_street_address        String?
  bank_city_suburb           String?
  bank_state                 String?
  bank_postcode              String?
  bank_bsb                   String?
  bank_acc_name              String?
  bank_acc_number            String?
  purchased_model            String?
  accessories                Json
}

model School {
  id                       Int                @id @default(autoincrement())
  name                     String             @unique
  state_territory          String
  facility_hire            Int @default(0)
  grades                   SchoolGrade[]  
  instruments              SchoolInstrument[]
  programs                 SchoolProgram[]
  resource_levy            Int @default(0)
  offers_instrument_rental Boolean
}

model SchoolInstrument {
  school       School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId     Int
  instrument   Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  instrumentId Int
  enrolled     Int        @default(0)
  cap          Int        @default(-1)
  status       String     @default("Available")

  @@id([instrumentId, schoolId])
  @@index([schoolId])
  @@index([instrumentId])
}

model Instrument {
  id             Int                @id @default(autoincrement())
  name           String             @unique
  program_type   ProgramType
  can_hire       Boolean
  hire_cost      Int @default(0)
  hire_insurance Int @default(0)
  accessories    Accessory[]
  schools        SchoolInstrument[]
  models         InstrumentModel[]
}


model SchoolProgram {
  school    School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId  Int
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId Int
  status    String @default("Active")

  @@id([schoolId, programId])
  @@index([schoolId])
  @@index([programId])
}

model Program {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  description    String
  type           ProgramType
  classType      ClassType
  program_status ProgramStatus
  tuition_fee     Int
  rehearsal_fee     Int
  enrol_fee      Int
  schools        SchoolProgram[]
}

model SchoolGrade {
  school      School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId    Int
  grade       Grade   @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId     Int

  @@id([gradeId, schoolId])
  @@index([schoolId])
  @@index([gradeId])
}

model Grade {
  id              Int           @id @default(autoincrement())
  order           Int
  name            String
  state_territory String
  category        String
  schools         SchoolGrade[]

  @@unique([name, state_territory])
}


model InstrumentModel {
  id                  Int           @id @default(autoincrement())
  instrument_category Instrument[]
  rrp                 Float
  sale_price          Float
  
  brand               String
  image               String
  model               String        @unique
  status              ModelStatus        @default(Available)
}

enum ModelStatus {
  Available
  Sold_Out
}

model Accessory {
  id                Int          @id @default(autoincrement())
  name              String       @unique
  status            String
  price             Int 
  is_recommended    Boolean
  description_short String
  description_long  String
  instruments       Instrument[]
}

enum ProgramType {
  Band
  String
  Keyboard
  Guitar
}

enum ClassType {
  Group
  Private
  Rehearsal
}

enum ProgramStatus {
  Active
  Inactive
}